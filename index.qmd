---
title: "Introduction to Python Programming"
author: "Justin Mathew"
format: html
---

# Introduction to Python

In this tutorial, we will cover the basics of Python programming, including data types, keywords, variables, input/output statements, operators, arithmetic expressions, operator precedence, and evaluation of expressions.

## Data Types

Python supports several built-in data types. Let's explore some of the most common ones:

- **Integer (`int`)**: Represents whole numbers.
- **Floating Point (`float`)**: Represents decimal numbers.
- **String (`str`)**: Represents sequences of characters.
- **Boolean (`bool`)**: Represents `True` or `False`.

### Example

```{python}
# Demonstrating different data types

# Integer
a = 10
print("Integer:", a, type(a))

# Float
b = 3.14
print("Float:", b, type(b))


# String
c = "Hello, Python!"
print("String:", c, type(c))

# Boolean
d = True
print("Boolean:", d, type(d))
```
## Variables
Variables are used to store data in memory. A variable is created when you assign a value to it using the = operator.
```{python}
# Variable assignment

x = 5
y = 2.5
z = x + y

print("x =", x)
print("y =", y)
print("z =", z)


```
## Input and Output Statements
Python provides the input() function to take user input and the print() function to display output.
```{python}
# Input and Output
name="justin"
age=32
#name = input("Enter your name: ")
#age = int(input("Enter your age: "))

print(f"Hello, {name}! You are {age} years old.")


```
## Operators
Operators are special symbols used to perform operations on variables and values. Python supports several types of operators:

Arithmetic Operators: +, -, *, /, //, %, **
Comparison Operators: ==, !=, >, <, >=, <=
Logical Operators: and, or, not
Assignment Operators: =, +=, -=, *=, /=, //=, %=, **=
```{python}
# Arithmetic Operations

a = 15
b = 4

addition = a + b
subtraction = a - b
multiplication = a * b
division = a / b
floor_division = a // b
modulus = a % b
exponentiation = a ** b

print("Addition:", addition)
print("Subtraction:", subtraction)
print("Multiplication:", multiplication)
print("Division:", division)
print("Floor Division:", floor_division)
print("Modulus:", modulus)
print("Exponentiation:", exponentiation)

```
## Arithmetic Expressions
An arithmetic expression is a combination of numbers, operators, and variables that evaluates to a value.

```{python}
# Evaluating arithmetic expressions

expression = (5 + 2) * (10 - 3) / 2 ** 2
print("Expression Result:", expression)
```
## Operator Precedence
Operator precedence determines the order in which operations are performed in an expression. The following list shows the precedence from highest to lowest:

** (Exponentiation)
*, /, //, % (Multiplication, Division, Floor Division, Modulus)
+, - (Addition, Subtraction)
```{python}
# Operator precedence

result = 5 + 3 * 2 ** 2 - 1
print("Operator Precedence Result:", result)

```


## Evaluation of Expressions
Python evaluates expressions from left to right, following the precedence rules.

```{python}
# Evaluation of expressions

value = (10 + 5) * 2 - 3 / 3
print("Evaluation Result:", value)

```
# Conditional Statements in Python

Conditional statements in Python allow the execution of specific code blocks based on whether a condition is true or false. Let's explore various types of conditional statements.

## The `if` Statement

The `if` statement tests a specific condition. If the condition is true, the code block under the `if` statement is executed.

Example

```{python}
# Example of an if statement

number = 10

if number > 0:
    print(f"{number} is a positive number.")
```
Explanation
The above program checks if number is greater than 0. Since 10 is greater than 0, the condition is true, and the message is printed.

## The if-else Statement
The if-else statement allows you to execute one block of code if the condition is true and another block if it is false.
```{python}
# Example of an if-else statement

number = -5

if number >= 0:
    print(f"{number} is a non-negative number.")
else:
    print(f"{number} is a negative number.")

```
Explanation
In this example, the program checks if number is greater than or equal to 0. If true, it prints that the number is non-negative. Otherwise, it prints that the number is negative.
Example 2

```{python}
age = 20

if age >= 18:
    print("You are eligible to vote.")
else:
    print("You are not eligible to vote.")
```
Explanation
This program checks if a person’s age is greater than or equal to 18. If true, it prints that the person is eligible to vote. Otherwise, it states they are not eligible to vote.
## The elif Statement
The elif statement, short for "else if," allows you to check multiple conditions sequentially. If one of the conditions is true, the corresponding block of code is executed.
```{python}
# Example of an elif statement

number = 0

if number > 0:
    print(f"{number} is a positive number.")
elif number == 0:
    print(f"{number} is zero.")
else:
    print(f"{number} is a negative number.")

```
Explanation
Here, the program checks three conditions: whether the number is positive, zero, or negative. The elif statement handles the case where number is exactly 0.

```{python}
# Another example of an elif statement

marks = 85

if marks >= 90:
    grade = 'A'
elif marks >= 80:
    grade = 'B'
elif marks >= 70:
    grade = 'C'
else:
    grade = 'F'

print(f"Your grade is {grade}.")

```
Explanation
This program assigns a grade based on the marks obtained. Depending on the range in which the marks fall, the corresponding grade is assigned and printed.

## Nested if-else Statements
Nested if-else statements allow you to include an if-else statement inside another if-else block for handling more complex conditions.
```{python}
# Example of nested if-else statements

number = 25

if number > 0:
    if number % 2 == 0:
        print(f"{number} is a positive even number.")
    else:
        print(f"{number} is a positive odd number.")

```
Explanation
This example checks if a number is positive and then further checks whether it is even or odd using nested if-else statements.

```{python}
# Another example of nested if-else statements

score = 92

if score >= 50:
    if score >= 90:
        print("Excellent!")
    else:
        print("Good job!")
else:
    print("Better luck next time.")

```
Explanation
This program checks if a score is at least 50. If true, it further checks if the score is 90 or above, printing "Excellent!" if it is, and "Good job!" if it isn’t. If the score is below 50, it prints "Better luck next time."


## Programs to Solve Numerical Problems Using Different Loop Structures in Python

### Introduction to Looping Concepts

Loops are fundamental to programming, enabling the repeated execution of a block of code. In Python, loops are used to iterate over a sequence of elements, perform repetitive tasks, and solve complex numerical problems efficiently. The main types of loops in Python are `for` loops, `while` loops, and nested loops. Additionally, Python provides control flow statements like `break`, `continue`, and `pass` to manage loop execution.

### The `for` Loop

The `for` loop in Python is used to iterate over a sequence (such as a list, tuple, string, or range). It automatically handles the iteration, making it straightforward to loop through each element in the sequence.

**Syntax**:
for variable in sequence:
    # Code block to be executed
    # Program to calculate the sum of numbers from 1 to 10
```{python}

sum = 0
for i in range(1, 11):
    sum += i
print("Sum of numbers from 1 to 10 is:", sum)
```
##The while Loop
The while loop continues to execute a block of code as long as a given condition is true. This type of loop is more flexible than the for loop because it can execute an indeterminate number of times.
Syntax:
while condition:
    # Code block to be executed
```{python}
# Program to find the factorial of a number
num = 5
factorial = 1
while num > 0:
    factorial *= num
    num -= 1
print("Factorial is:", factorial)
```
Nested Loops
A nested loop is a loop inside another loop. This allows the execution of complex iterations, where each iteration of the outer loop triggers the full execution of the inner loop.
```{python}
# Program to print a multiplication table using nested loops
for i in range(1, 6):
    for j in range(1, 6):
        print(i * j, end="\t")
    print()
```
##Control Flow Statements: break, continue, and pass
break: Terminates the loop prematurely when a specific condition is met.
```{python}
# Program to find the first number divisible by 7 in a list
for num in [12, 15, 21, 29, 42]:
    if num % 7 == 0:
        print("First number divisible by 7 is:", num)
        break
```
continue: Skips the current iteration and moves on to the next one when a condition is met.
```{python}
# Program to print odd numbers between 1 and 10
for i in range(1, 11):
    if i % 2 == 0:
        continue
    print(i)

```
pass: Acts as a placeholder, allowing you to write a loop without any operation when needed. It is often used in scenarios where the code block needs to be defined later.
```{python}
# Example of a loop with a pass statement
for i in range(5):
    pass  # Logic will be added later

```

##The range Function
The range function is often used in for loops to generate a sequence of numbers. It allows for iteration over a range of values with control over the start, stop, and step values.
range(start, stop, step)
```{python}
# Program to print numbers from 1 to 5
for i in range(1, 6):
    print(i)

```
#Sample Programs Using Looping Constructs
#Sum of all even numbers between 1 and 100:

```{python}

sum_even = 0
for num in range(1, 101):
    if num % 2 == 0:
        sum_even += num
print("Sum of even numbers from 1 to 100 is:", sum_even)

```
#Prime number check using a while loop:
```{python}

num = 29
is_prime = True
i = 2
while i <= num // 2:
    if num % i == 0:
        is_prime = False
        break
    i += 1
if is_prime:
    print(num, "is a prime number")
else:
    print(num, "is not a prime number")
```
#Fibonacci series using nested loops:

```{python}

n = 10
a, b = 0, 1
print("Fibonacci series up to", n, ":")
for i in range(n):
    print(a, end=" ")
    a, b = b, a + b
```

#Functions

In this module, we will explore the concept of functions in Python. You will learn how to define and call functions, pass parameters, return values, and utilize various types of functions, including lambda functions. Additionally, we will cover type conversion, coercion, and mathematical functions.

# Understanding Functions

Functions are reusable blocks of code that perform a specific task. They enhance modularity and allow for code reuse, making programs easier to manage and maintain.

## Way of Writing Functions

In Python, functions are defined using the `def` keyword, followed by the function name and parentheses `()` which may include parameters. The function body is indented and contains the code that executes when the function is called.

Example:
```
def function_name(parameters):
    # Function body
    statement(s)
```

## How to Call Functions

Once a function is defined, it can be called by using its name followed by parentheses. If the function takes parameters, you need to provide arguments in the parentheses.

Example:
```
function_name(arguments)
```

## Passing Parameters and Return Values

Functions can accept parameters (or arguments) that are passed to them when they are called. They can also return a value using the `return` statement.

Example:
```
def add(a, b):
    return a + b

result = add(5, 3)
```

In this example, `5` and `3` are passed to the `add` function as arguments, and the function returns their sum.

## Sample Programs Using Functions

Here are a few sample programs that demonstrate the use of functions in Python:

1. **Calculate Factorial of a Number**
```{python}
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))  # Output: 120
```

2. **Check if a Number is Prime**
```{python}
def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

print(is_prime(11))  # Output: True
```

## Type Conversion and Coercion

Python provides several built-in functions for type conversion, such as `int()`, `float()`, and `str()`. Type coercion refers to the implicit conversion of data types during operations.

Example:
```{python}
x = "5"
y = 10
z = int(x) + y  # Explicit type conversion
print(z)  # Output: 15
```

## Lambda Functions

Lambda functions are small anonymous functions defined using the `lambda` keyword. They can have any number of arguments but only one expression.

Example:
```[python}
square = lambda x: x ** 2
print(square(4))  # Output: 16
```

## Mathematical Functions

Python provides a module named `math` that includes various mathematical functions like `sqrt()`, `sin()`, `cos()`, and more.

Example:
```{python}
import math

print(math.sqrt(16))  # Output: 4.0
print(math.sin(math.pi/2))  # Output: 1.0
```


