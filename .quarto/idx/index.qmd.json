{"title":"Introduction to Python Programming","markdown":{"yaml":{"title":"Introduction to Python Programming","author":"Justin Mathew","format":"html"},"headingText":"Introduction to Python","containsRefs":false,"markdown":"\n\n\nIn this tutorial, we will cover the basics of Python programming, including data types, keywords, variables, input/output statements, operators, arithmetic expressions, operator precedence, and evaluation of expressions.\n\n## Data Types\n\nPython supports several built-in data types. Let's explore some of the most common ones:\n\n- **Integer (`int`)**: Represents whole numbers.\n- **Floating Point (`float`)**: Represents decimal numbers.\n- **String (`str`)**: Represents sequences of characters.\n- **Boolean (`bool`)**: Represents `True` or `False`.\n\n### Example\n\n```{python}\n# Demonstrating different data types\n\n# Integer\na = 10\nprint(\"Integer:\", a, type(a))\n\n# Float\nb = 3.14\nprint(\"Float:\", b, type(b))\n\n\n# String\nc = \"Hello, Python!\"\nprint(\"String:\", c, type(c))\n\n# Boolean\nd = True\nprint(\"Boolean:\", d, type(d))\n```\n## Variables\nVariables are used to store data in memory. A variable is created when you assign a value to it using the = operator.\n```{python}\n# Variable assignment\n\nx = 5\ny = 2.5\nz = x + y\n\nprint(\"x =\", x)\nprint(\"y =\", y)\nprint(\"z =\", z)\n\n\n```\n## Input and Output Statements\nPython provides the input() function to take user input and the print() function to display output.\n```{python}\n# Input and Output\nname=\"justin\"\nage=32\n#name = input(\"Enter your name: \")\n#age = int(input(\"Enter your age: \"))\n\nprint(f\"Hello, {name}! You are {age} years old.\")\n\n\n```\n## Operators\nOperators are special symbols used to perform operations on variables and values. Python supports several types of operators:\n\nArithmetic Operators: +, -, *, /, //, %, **\nComparison Operators: ==, !=, >, <, >=, <=\nLogical Operators: and, or, not\nAssignment Operators: =, +=, -=, *=, /=, //=, %=, **=\n```{python}\n# Arithmetic Operations\n\na = 15\nb = 4\n\naddition = a + b\nsubtraction = a - b\nmultiplication = a * b\ndivision = a / b\nfloor_division = a // b\nmodulus = a % b\nexponentiation = a ** b\n\nprint(\"Addition:\", addition)\nprint(\"Subtraction:\", subtraction)\nprint(\"Multiplication:\", multiplication)\nprint(\"Division:\", division)\nprint(\"Floor Division:\", floor_division)\nprint(\"Modulus:\", modulus)\nprint(\"Exponentiation:\", exponentiation)\n\n```\n## Arithmetic Expressions\nAn arithmetic expression is a combination of numbers, operators, and variables that evaluates to a value.\n\n```{python}\n# Evaluating arithmetic expressions\n\nexpression = (5 + 2) * (10 - 3) / 2 ** 2\nprint(\"Expression Result:\", expression)\n```\n## Operator Precedence\nOperator precedence determines the order in which operations are performed in an expression. The following list shows the precedence from highest to lowest:\n\n** (Exponentiation)\n*, /, //, % (Multiplication, Division, Floor Division, Modulus)\n+, - (Addition, Subtraction)\n```{python}\n# Operator precedence\n\nresult = 5 + 3 * 2 ** 2 - 1\nprint(\"Operator Precedence Result:\", result)\n\n```\n\n\n## Evaluation of Expressions\nPython evaluates expressions from left to right, following the precedence rules.\n\n```{python}\n# Evaluation of expressions\n\nvalue = (10 + 5) * 2 - 3 / 3\nprint(\"Evaluation Result:\", value)\n\n```\n# Conditional Statements in Python\n\nConditional statements in Python allow the execution of specific code blocks based on whether a condition is true or false. Let's explore various types of conditional statements.\n\n## The `if` Statement\n\nThe `if` statement tests a specific condition. If the condition is true, the code block under the `if` statement is executed.\n\nExample\n\n```{python}\n# Example of an if statement\n\nnumber = 10\n\nif number > 0:\n    print(f\"{number} is a positive number.\")\n```\nExplanation\nThe above program checks if number is greater than 0. Since 10 is greater than 0, the condition is true, and the message is printed.\n\n## The if-else Statement\nThe if-else statement allows you to execute one block of code if the condition is true and another block if it is false.\n```{python}\n# Example of an if-else statement\n\nnumber = -5\n\nif number >= 0:\n    print(f\"{number} is a non-negative number.\")\nelse:\n    print(f\"{number} is a negative number.\")\n\n```\nExplanation\nIn this example, the program checks if number is greater than or equal to 0. If true, it prints that the number is non-negative. Otherwise, it prints that the number is negative.\nExample 2\n\n```{python}\nage = 20\n\nif age >= 18:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote.\")\n```\nExplanation\nThis program checks if a person’s age is greater than or equal to 18. If true, it prints that the person is eligible to vote. Otherwise, it states they are not eligible to vote.\n## The elif Statement\nThe elif statement, short for \"else if,\" allows you to check multiple conditions sequentially. If one of the conditions is true, the corresponding block of code is executed.\n```{python}\n# Example of an elif statement\n\nnumber = 0\n\nif number > 0:\n    print(f\"{number} is a positive number.\")\nelif number == 0:\n    print(f\"{number} is zero.\")\nelse:\n    print(f\"{number} is a negative number.\")\n\n```\nExplanation\nHere, the program checks three conditions: whether the number is positive, zero, or negative. The elif statement handles the case where number is exactly 0.\n\n```{python}\n# Another example of an elif statement\n\nmarks = 85\n\nif marks >= 90:\n    grade = 'A'\nelif marks >= 80:\n    grade = 'B'\nelif marks >= 70:\n    grade = 'C'\nelse:\n    grade = 'F'\n\nprint(f\"Your grade is {grade}.\")\n\n```\nExplanation\nThis program assigns a grade based on the marks obtained. Depending on the range in which the marks fall, the corresponding grade is assigned and printed.\n\n## Nested if-else Statements\nNested if-else statements allow you to include an if-else statement inside another if-else block for handling more complex conditions.\n```{python}\n# Example of nested if-else statements\n\nnumber = 25\n\nif number > 0:\n    if number % 2 == 0:\n        print(f\"{number} is a positive even number.\")\n    else:\n        print(f\"{number} is a positive odd number.\")\n\n```\nExplanation\nThis example checks if a number is positive and then further checks whether it is even or odd using nested if-else statements.\n\n```{python}\n# Another example of nested if-else statements\n\nscore = 92\n\nif score >= 50:\n    if score >= 90:\n        print(\"Excellent!\")\n    else:\n        print(\"Good job!\")\nelse:\n    print(\"Better luck next time.\")\n\n```\nExplanation\nThis program checks if a score is at least 50. If true, it further checks if the score is 90 or above, printing \"Excellent!\" if it is, and \"Good job!\" if it isn’t. If the score is below 50, it prints \"Better luck next time.\"\n\n\n## Programs to Solve Numerical Problems Using Different Loop Structures in Python\n\n### Introduction to Looping Concepts\n\nLoops are fundamental to programming, enabling the repeated execution of a block of code. In Python, loops are used to iterate over a sequence of elements, perform repetitive tasks, and solve complex numerical problems efficiently. The main types of loops in Python are `for` loops, `while` loops, and nested loops. Additionally, Python provides control flow statements like `break`, `continue`, and `pass` to manage loop execution.\n\n### The `for` Loop\n\nThe `for` loop in Python is used to iterate over a sequence (such as a list, tuple, string, or range). It automatically handles the iteration, making it straightforward to loop through each element in the sequence.\n\n**Syntax**:\nfor variable in sequence:\n    # Code block to be executed\n    # Program to calculate the sum of numbers from 1 to 10\n```{python}\n\nsum = 0\nfor i in range(1, 11):\n    sum += i\nprint(\"Sum of numbers from 1 to 10 is:\", sum)\n```\n##The while Loop\nThe while loop continues to execute a block of code as long as a given condition is true. This type of loop is more flexible than the for loop because it can execute an indeterminate number of times.\nSyntax:\nwhile condition:\n    # Code block to be executed\n```{python}\n# Program to find the factorial of a number\nnum = 5\nfactorial = 1\nwhile num > 0:\n    factorial *= num\n    num -= 1\nprint(\"Factorial is:\", factorial)\n```\nNested Loops\nA nested loop is a loop inside another loop. This allows the execution of complex iterations, where each iteration of the outer loop triggers the full execution of the inner loop.\n```{python}\n# Program to print a multiplication table using nested loops\nfor i in range(1, 6):\n    for j in range(1, 6):\n        print(i * j, end=\"\\t\")\n    print()\n```\n##Control Flow Statements: break, continue, and pass\nbreak: Terminates the loop prematurely when a specific condition is met.\n```{python}\n# Program to find the first number divisible by 7 in a list\nfor num in [12, 15, 21, 29, 42]:\n    if num % 7 == 0:\n        print(\"First number divisible by 7 is:\", num)\n        break\n```\ncontinue: Skips the current iteration and moves on to the next one when a condition is met.\n```{python}\n# Program to print odd numbers between 1 and 10\nfor i in range(1, 11):\n    if i % 2 == 0:\n        continue\n    print(i)\n\n```\npass: Acts as a placeholder, allowing you to write a loop without any operation when needed. It is often used in scenarios where the code block needs to be defined later.\n```{python}\n# Example of a loop with a pass statement\nfor i in range(5):\n    pass  # Logic will be added later\n\n```\n\n##The range Function\nThe range function is often used in for loops to generate a sequence of numbers. It allows for iteration over a range of values with control over the start, stop, and step values.\nrange(start, stop, step)\n```{python}\n# Program to print numbers from 1 to 5\nfor i in range(1, 6):\n    print(i)\n\n```\n#Sample Programs Using Looping Constructs\n#Sum of all even numbers between 1 and 100:\n\n```{python}\n\nsum_even = 0\nfor num in range(1, 101):\n    if num % 2 == 0:\n        sum_even += num\nprint(\"Sum of even numbers from 1 to 100 is:\", sum_even)\n\n```\n#Prime number check using a while loop:\n```{python}\n\nnum = 29\nis_prime = True\ni = 2\nwhile i <= num // 2:\n    if num % i == 0:\n        is_prime = False\n        break\n    i += 1\nif is_prime:\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")\n```\n#Fibonacci series using nested loops:\n\n```{python}\n\nn = 10\na, b = 0, 1\nprint(\"Fibonacci series up to\", n, \":\")\nfor i in range(n):\n    print(a, end=\" \")\n    a, b = b, a + b\n```\n\n#Functions\n\nIn this module, we will explore the concept of functions in Python. You will learn how to define and call functions, pass parameters, return values, and utilize various types of functions, including lambda functions. Additionally, we will cover type conversion, coercion, and mathematical functions.\n\n# Understanding Functions\n\nFunctions are reusable blocks of code that perform a specific task. They enhance modularity and allow for code reuse, making programs easier to manage and maintain.\n\n## Way of Writing Functions\n\nIn Python, functions are defined using the `def` keyword, followed by the function name and parentheses `()` which may include parameters. The function body is indented and contains the code that executes when the function is called.\n\nExample:\n```\ndef function_name(parameters):\n    # Function body\n    statement(s)\n```\n\n## How to Call Functions\n\nOnce a function is defined, it can be called by using its name followed by parentheses. If the function takes parameters, you need to provide arguments in the parentheses.\n\nExample:\n```\nfunction_name(arguments)\n```\n\n## Passing Parameters and Return Values\n\nFunctions can accept parameters (or arguments) that are passed to them when they are called. They can also return a value using the `return` statement.\n\nExample:\n```\ndef add(a, b):\n    return a + b\n\nresult = add(5, 3)\n```\n\nIn this example, `5` and `3` are passed to the `add` function as arguments, and the function returns their sum.\n\n## Sample Programs Using Functions\n\nHere are a few sample programs that demonstrate the use of functions in Python:\n\n1. **Calculate Factorial of a Number**\n```{python}\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))  # Output: 120\n```\n\n2. **Check if a Number is Prime**\n```{python}\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(11))  # Output: True\n```\n\n## Type Conversion and Coercion\n\nPython provides several built-in functions for type conversion, such as `int()`, `float()`, and `str()`. Type coercion refers to the implicit conversion of data types during operations.\n\nExample:\n```{python}\nx = \"5\"\ny = 10\nz = int(x) + y  # Explicit type conversion\nprint(z)  # Output: 15\n```\n\n## Lambda Functions\n\nLambda functions are small anonymous functions defined using the `lambda` keyword. They can have any number of arguments but only one expression.\n\nExample:\n```[python}\nsquare = lambda x: x ** 2\nprint(square(4))  # Output: 16\n```\n\n## Mathematical Functions\n\nPython provides a module named `math` that includes various mathematical functions like `sqrt()`, `sin()`, `cos()`, and more.\n\nExample:\n```{python}\nimport math\n\nprint(math.sqrt(16))  # Output: 4.0\nprint(math.sin(math.pi/2))  # Output: 1.0\n```\n\n# Strings\n\nIn this module, we will explore the concept of strings in Python. You will learn about various string handling functions and how to write simple programs using these functions.\n\n\n\nStrings are sequences of characters used to store and manipulate text. In Python, strings are enclosed in either single quotes (`'`) or double quotes (`\"`).\n\nExample:\n```python\nmy_string = \"Hello, World!\"\n```\nPython also supports multi-line strings, which are enclosed in triple quotes (''' or \"\"\").\n```{python}\nmulti_line_string = '''This is a\nmulti-line string.'''\n```\n##String Handling Functions\nPython provides several built-in functions to manipulate strings. Here are some commonly used string handling functions:\n\n###len()\nThe len() function returns the length of a string (i.e., the number of characters).\n```{python}\nmy_string = \"Hello\"\nlength = len(my_string)  # Output: 5\n```\n###upper() and lower()\nThe upper() function converts all characters in a string to uppercase, while lower() converts them to lowercase.\n```{python}\nmy_string = \"Hello\"\nprint(my_string.upper())  # Output: HELLO\nprint(my_string.lower())  # Output: hello\n\n```\n###strip()\nThe strip() function removes leading and trailing whitespace from a string.\n```{python}\nmy_string = \"   Hello   \"\nprint(my_string.strip())  # Output: \"Hello\"\n```\n###replace()\nThe replace() function replaces all occurrences of a substring with another substring.\n```{python}\nmy_string = \"Hello, World!\"\nnew_string = my_string.replace(\"World\", \"Python\")  # Output: \"Hello, Python!\"\n```\n###split() and join()\nThe split() function splits a string into a list of substrings based on a specified delimiter. The join() function does the opposite by joining a list of strings into a single string, with a specified delimiter.\n```{python}\nmy_string = \"Hello, World!\"\nwords = my_string.split(\", \")  # Output: ['Hello', 'World!']\njoined_string = \" \".join(words)  # Output: \"Hello World!\"\n```\n##Writing Simple Programs Using String Handling Functions\nHere are a few simple programs that demonstrate the use of string handling functions:\n\n###Check if a String is a Palindrome\n```{python}\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\n\nprint(is_palindrome(\"Madam\"))  # Output: True\nprint(is_palindrome(\"Hello\"))  # Output: False\n```\n###Count the Number of Vowels in a String\n```{python}\ndef count_vowels(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\nprint(count_vowels(\"Hello World\"))  # Output: 3\n\n```\n###Reverse the Words in a Sentence\n\n\n```{python}\ndef reverse_words(sentence):\n    words = sentence.split()\n    reversed_sentence = \" \".join(reversed(words))\n    return reversed_sentence\n\nprint(reverse_words(\"Hello World\"))  # Output: \"World Hello\"\n```\n","srcMarkdownNoYaml":"\n\n# Introduction to Python\n\nIn this tutorial, we will cover the basics of Python programming, including data types, keywords, variables, input/output statements, operators, arithmetic expressions, operator precedence, and evaluation of expressions.\n\n## Data Types\n\nPython supports several built-in data types. Let's explore some of the most common ones:\n\n- **Integer (`int`)**: Represents whole numbers.\n- **Floating Point (`float`)**: Represents decimal numbers.\n- **String (`str`)**: Represents sequences of characters.\n- **Boolean (`bool`)**: Represents `True` or `False`.\n\n### Example\n\n```{python}\n# Demonstrating different data types\n\n# Integer\na = 10\nprint(\"Integer:\", a, type(a))\n\n# Float\nb = 3.14\nprint(\"Float:\", b, type(b))\n\n\n# String\nc = \"Hello, Python!\"\nprint(\"String:\", c, type(c))\n\n# Boolean\nd = True\nprint(\"Boolean:\", d, type(d))\n```\n## Variables\nVariables are used to store data in memory. A variable is created when you assign a value to it using the = operator.\n```{python}\n# Variable assignment\n\nx = 5\ny = 2.5\nz = x + y\n\nprint(\"x =\", x)\nprint(\"y =\", y)\nprint(\"z =\", z)\n\n\n```\n## Input and Output Statements\nPython provides the input() function to take user input and the print() function to display output.\n```{python}\n# Input and Output\nname=\"justin\"\nage=32\n#name = input(\"Enter your name: \")\n#age = int(input(\"Enter your age: \"))\n\nprint(f\"Hello, {name}! You are {age} years old.\")\n\n\n```\n## Operators\nOperators are special symbols used to perform operations on variables and values. Python supports several types of operators:\n\nArithmetic Operators: +, -, *, /, //, %, **\nComparison Operators: ==, !=, >, <, >=, <=\nLogical Operators: and, or, not\nAssignment Operators: =, +=, -=, *=, /=, //=, %=, **=\n```{python}\n# Arithmetic Operations\n\na = 15\nb = 4\n\naddition = a + b\nsubtraction = a - b\nmultiplication = a * b\ndivision = a / b\nfloor_division = a // b\nmodulus = a % b\nexponentiation = a ** b\n\nprint(\"Addition:\", addition)\nprint(\"Subtraction:\", subtraction)\nprint(\"Multiplication:\", multiplication)\nprint(\"Division:\", division)\nprint(\"Floor Division:\", floor_division)\nprint(\"Modulus:\", modulus)\nprint(\"Exponentiation:\", exponentiation)\n\n```\n## Arithmetic Expressions\nAn arithmetic expression is a combination of numbers, operators, and variables that evaluates to a value.\n\n```{python}\n# Evaluating arithmetic expressions\n\nexpression = (5 + 2) * (10 - 3) / 2 ** 2\nprint(\"Expression Result:\", expression)\n```\n## Operator Precedence\nOperator precedence determines the order in which operations are performed in an expression. The following list shows the precedence from highest to lowest:\n\n** (Exponentiation)\n*, /, //, % (Multiplication, Division, Floor Division, Modulus)\n+, - (Addition, Subtraction)\n```{python}\n# Operator precedence\n\nresult = 5 + 3 * 2 ** 2 - 1\nprint(\"Operator Precedence Result:\", result)\n\n```\n\n\n## Evaluation of Expressions\nPython evaluates expressions from left to right, following the precedence rules.\n\n```{python}\n# Evaluation of expressions\n\nvalue = (10 + 5) * 2 - 3 / 3\nprint(\"Evaluation Result:\", value)\n\n```\n# Conditional Statements in Python\n\nConditional statements in Python allow the execution of specific code blocks based on whether a condition is true or false. Let's explore various types of conditional statements.\n\n## The `if` Statement\n\nThe `if` statement tests a specific condition. If the condition is true, the code block under the `if` statement is executed.\n\nExample\n\n```{python}\n# Example of an if statement\n\nnumber = 10\n\nif number > 0:\n    print(f\"{number} is a positive number.\")\n```\nExplanation\nThe above program checks if number is greater than 0. Since 10 is greater than 0, the condition is true, and the message is printed.\n\n## The if-else Statement\nThe if-else statement allows you to execute one block of code if the condition is true and another block if it is false.\n```{python}\n# Example of an if-else statement\n\nnumber = -5\n\nif number >= 0:\n    print(f\"{number} is a non-negative number.\")\nelse:\n    print(f\"{number} is a negative number.\")\n\n```\nExplanation\nIn this example, the program checks if number is greater than or equal to 0. If true, it prints that the number is non-negative. Otherwise, it prints that the number is negative.\nExample 2\n\n```{python}\nage = 20\n\nif age >= 18:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote.\")\n```\nExplanation\nThis program checks if a person’s age is greater than or equal to 18. If true, it prints that the person is eligible to vote. Otherwise, it states they are not eligible to vote.\n## The elif Statement\nThe elif statement, short for \"else if,\" allows you to check multiple conditions sequentially. If one of the conditions is true, the corresponding block of code is executed.\n```{python}\n# Example of an elif statement\n\nnumber = 0\n\nif number > 0:\n    print(f\"{number} is a positive number.\")\nelif number == 0:\n    print(f\"{number} is zero.\")\nelse:\n    print(f\"{number} is a negative number.\")\n\n```\nExplanation\nHere, the program checks three conditions: whether the number is positive, zero, or negative. The elif statement handles the case where number is exactly 0.\n\n```{python}\n# Another example of an elif statement\n\nmarks = 85\n\nif marks >= 90:\n    grade = 'A'\nelif marks >= 80:\n    grade = 'B'\nelif marks >= 70:\n    grade = 'C'\nelse:\n    grade = 'F'\n\nprint(f\"Your grade is {grade}.\")\n\n```\nExplanation\nThis program assigns a grade based on the marks obtained. Depending on the range in which the marks fall, the corresponding grade is assigned and printed.\n\n## Nested if-else Statements\nNested if-else statements allow you to include an if-else statement inside another if-else block for handling more complex conditions.\n```{python}\n# Example of nested if-else statements\n\nnumber = 25\n\nif number > 0:\n    if number % 2 == 0:\n        print(f\"{number} is a positive even number.\")\n    else:\n        print(f\"{number} is a positive odd number.\")\n\n```\nExplanation\nThis example checks if a number is positive and then further checks whether it is even or odd using nested if-else statements.\n\n```{python}\n# Another example of nested if-else statements\n\nscore = 92\n\nif score >= 50:\n    if score >= 90:\n        print(\"Excellent!\")\n    else:\n        print(\"Good job!\")\nelse:\n    print(\"Better luck next time.\")\n\n```\nExplanation\nThis program checks if a score is at least 50. If true, it further checks if the score is 90 or above, printing \"Excellent!\" if it is, and \"Good job!\" if it isn’t. If the score is below 50, it prints \"Better luck next time.\"\n\n\n## Programs to Solve Numerical Problems Using Different Loop Structures in Python\n\n### Introduction to Looping Concepts\n\nLoops are fundamental to programming, enabling the repeated execution of a block of code. In Python, loops are used to iterate over a sequence of elements, perform repetitive tasks, and solve complex numerical problems efficiently. The main types of loops in Python are `for` loops, `while` loops, and nested loops. Additionally, Python provides control flow statements like `break`, `continue`, and `pass` to manage loop execution.\n\n### The `for` Loop\n\nThe `for` loop in Python is used to iterate over a sequence (such as a list, tuple, string, or range). It automatically handles the iteration, making it straightforward to loop through each element in the sequence.\n\n**Syntax**:\nfor variable in sequence:\n    # Code block to be executed\n    # Program to calculate the sum of numbers from 1 to 10\n```{python}\n\nsum = 0\nfor i in range(1, 11):\n    sum += i\nprint(\"Sum of numbers from 1 to 10 is:\", sum)\n```\n##The while Loop\nThe while loop continues to execute a block of code as long as a given condition is true. This type of loop is more flexible than the for loop because it can execute an indeterminate number of times.\nSyntax:\nwhile condition:\n    # Code block to be executed\n```{python}\n# Program to find the factorial of a number\nnum = 5\nfactorial = 1\nwhile num > 0:\n    factorial *= num\n    num -= 1\nprint(\"Factorial is:\", factorial)\n```\nNested Loops\nA nested loop is a loop inside another loop. This allows the execution of complex iterations, where each iteration of the outer loop triggers the full execution of the inner loop.\n```{python}\n# Program to print a multiplication table using nested loops\nfor i in range(1, 6):\n    for j in range(1, 6):\n        print(i * j, end=\"\\t\")\n    print()\n```\n##Control Flow Statements: break, continue, and pass\nbreak: Terminates the loop prematurely when a specific condition is met.\n```{python}\n# Program to find the first number divisible by 7 in a list\nfor num in [12, 15, 21, 29, 42]:\n    if num % 7 == 0:\n        print(\"First number divisible by 7 is:\", num)\n        break\n```\ncontinue: Skips the current iteration and moves on to the next one when a condition is met.\n```{python}\n# Program to print odd numbers between 1 and 10\nfor i in range(1, 11):\n    if i % 2 == 0:\n        continue\n    print(i)\n\n```\npass: Acts as a placeholder, allowing you to write a loop without any operation when needed. It is often used in scenarios where the code block needs to be defined later.\n```{python}\n# Example of a loop with a pass statement\nfor i in range(5):\n    pass  # Logic will be added later\n\n```\n\n##The range Function\nThe range function is often used in for loops to generate a sequence of numbers. It allows for iteration over a range of values with control over the start, stop, and step values.\nrange(start, stop, step)\n```{python}\n# Program to print numbers from 1 to 5\nfor i in range(1, 6):\n    print(i)\n\n```\n#Sample Programs Using Looping Constructs\n#Sum of all even numbers between 1 and 100:\n\n```{python}\n\nsum_even = 0\nfor num in range(1, 101):\n    if num % 2 == 0:\n        sum_even += num\nprint(\"Sum of even numbers from 1 to 100 is:\", sum_even)\n\n```\n#Prime number check using a while loop:\n```{python}\n\nnum = 29\nis_prime = True\ni = 2\nwhile i <= num // 2:\n    if num % i == 0:\n        is_prime = False\n        break\n    i += 1\nif is_prime:\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")\n```\n#Fibonacci series using nested loops:\n\n```{python}\n\nn = 10\na, b = 0, 1\nprint(\"Fibonacci series up to\", n, \":\")\nfor i in range(n):\n    print(a, end=\" \")\n    a, b = b, a + b\n```\n\n#Functions\n\nIn this module, we will explore the concept of functions in Python. You will learn how to define and call functions, pass parameters, return values, and utilize various types of functions, including lambda functions. Additionally, we will cover type conversion, coercion, and mathematical functions.\n\n# Understanding Functions\n\nFunctions are reusable blocks of code that perform a specific task. They enhance modularity and allow for code reuse, making programs easier to manage and maintain.\n\n## Way of Writing Functions\n\nIn Python, functions are defined using the `def` keyword, followed by the function name and parentheses `()` which may include parameters. The function body is indented and contains the code that executes when the function is called.\n\nExample:\n```\ndef function_name(parameters):\n    # Function body\n    statement(s)\n```\n\n## How to Call Functions\n\nOnce a function is defined, it can be called by using its name followed by parentheses. If the function takes parameters, you need to provide arguments in the parentheses.\n\nExample:\n```\nfunction_name(arguments)\n```\n\n## Passing Parameters and Return Values\n\nFunctions can accept parameters (or arguments) that are passed to them when they are called. They can also return a value using the `return` statement.\n\nExample:\n```\ndef add(a, b):\n    return a + b\n\nresult = add(5, 3)\n```\n\nIn this example, `5` and `3` are passed to the `add` function as arguments, and the function returns their sum.\n\n## Sample Programs Using Functions\n\nHere are a few sample programs that demonstrate the use of functions in Python:\n\n1. **Calculate Factorial of a Number**\n```{python}\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))  # Output: 120\n```\n\n2. **Check if a Number is Prime**\n```{python}\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(11))  # Output: True\n```\n\n## Type Conversion and Coercion\n\nPython provides several built-in functions for type conversion, such as `int()`, `float()`, and `str()`. Type coercion refers to the implicit conversion of data types during operations.\n\nExample:\n```{python}\nx = \"5\"\ny = 10\nz = int(x) + y  # Explicit type conversion\nprint(z)  # Output: 15\n```\n\n## Lambda Functions\n\nLambda functions are small anonymous functions defined using the `lambda` keyword. They can have any number of arguments but only one expression.\n\nExample:\n```[python}\nsquare = lambda x: x ** 2\nprint(square(4))  # Output: 16\n```\n\n## Mathematical Functions\n\nPython provides a module named `math` that includes various mathematical functions like `sqrt()`, `sin()`, `cos()`, and more.\n\nExample:\n```{python}\nimport math\n\nprint(math.sqrt(16))  # Output: 4.0\nprint(math.sin(math.pi/2))  # Output: 1.0\n```\n\n# Strings\n\nIn this module, we will explore the concept of strings in Python. You will learn about various string handling functions and how to write simple programs using these functions.\n\n\n\nStrings are sequences of characters used to store and manipulate text. In Python, strings are enclosed in either single quotes (`'`) or double quotes (`\"`).\n\nExample:\n```python\nmy_string = \"Hello, World!\"\n```\nPython also supports multi-line strings, which are enclosed in triple quotes (''' or \"\"\").\n```{python}\nmulti_line_string = '''This is a\nmulti-line string.'''\n```\n##String Handling Functions\nPython provides several built-in functions to manipulate strings. Here are some commonly used string handling functions:\n\n###len()\nThe len() function returns the length of a string (i.e., the number of characters).\n```{python}\nmy_string = \"Hello\"\nlength = len(my_string)  # Output: 5\n```\n###upper() and lower()\nThe upper() function converts all characters in a string to uppercase, while lower() converts them to lowercase.\n```{python}\nmy_string = \"Hello\"\nprint(my_string.upper())  # Output: HELLO\nprint(my_string.lower())  # Output: hello\n\n```\n###strip()\nThe strip() function removes leading and trailing whitespace from a string.\n```{python}\nmy_string = \"   Hello   \"\nprint(my_string.strip())  # Output: \"Hello\"\n```\n###replace()\nThe replace() function replaces all occurrences of a substring with another substring.\n```{python}\nmy_string = \"Hello, World!\"\nnew_string = my_string.replace(\"World\", \"Python\")  # Output: \"Hello, Python!\"\n```\n###split() and join()\nThe split() function splits a string into a list of substrings based on a specified delimiter. The join() function does the opposite by joining a list of strings into a single string, with a specified delimiter.\n```{python}\nmy_string = \"Hello, World!\"\nwords = my_string.split(\", \")  # Output: ['Hello', 'World!']\njoined_string = \" \".join(words)  # Output: \"Hello World!\"\n```\n##Writing Simple Programs Using String Handling Functions\nHere are a few simple programs that demonstrate the use of string handling functions:\n\n###Check if a String is a Palindrome\n```{python}\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\n\nprint(is_palindrome(\"Madam\"))  # Output: True\nprint(is_palindrome(\"Hello\"))  # Output: False\n```\n###Count the Number of Vowels in a String\n```{python}\ndef count_vowels(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\nprint(count_vowels(\"Hello World\"))  # Output: 3\n\n```\n###Reverse the Words in a Sentence\n\n\n```{python}\ndef reverse_words(sentence):\n    words = sentence.split()\n    reversed_sentence = \" \".join(reversed(words))\n    return reversed_sentence\n\nprint(reverse_words(\"Hello World\"))  # Output: \"World Hello\"\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":"cosmo","title":"Introduction to Python Programming","author":"Justin Mathew"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}