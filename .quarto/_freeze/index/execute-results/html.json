{
  "hash": "32ef8eb44b3fd332d23392f3e702e4f2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Introduction to Python Programming\"\nauthor: \"Your Name\"\nformat: html\n---\n\n\n\n\n# Introduction to Python\n\nIn this tutorial, we will cover the basics of Python programming, including data types, keywords, variables, input/output statements, operators, arithmetic expressions, operator precedence, and evaluation of expressions.\n\n## Data Types\n\nPython supports several built-in data types. Let's explore some of the most common ones:\n\n- **Integer (`int`)**: Represents whole numbers.\n- **Floating Point (`float`)**: Represents decimal numbers.\n- **String (`str`)**: Represents sequences of characters.\n- **Boolean (`bool`)**: Represents `True` or `False`.\n\n### Example\n\n::: {#e08c989a .cell execution_count=1}\n``` {.python .cell-code}\n# Demonstrating different data types\n\n# Integer\na = 10\nprint(\"Integer:\", a, type(a))\n\n# Float\nb = 3.14\nprint(\"Float:\", b, type(b))\n\n\n# String\nc = \"Hello, Python!\"\nprint(\"String:\", c, type(c))\n\n# Boolean\nd = True\nprint(\"Boolean:\", d, type(d))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInteger: 10 <class 'int'>\nFloat: 3.14 <class 'float'>\nString: Hello, Python! <class 'str'>\nBoolean: True <class 'bool'>\n```\n:::\n:::\n\n\n## Variables\nVariables are used to store data in memory. A variable is created when you assign a value to it using the = operator.\n\n::: {#cbcd2192 .cell execution_count=2}\n``` {.python .cell-code}\n# Variable assignment\n\nx = 5\ny = 2.5\nz = x + y\n\nprint(\"x =\", x)\nprint(\"y =\", y)\nprint(\"z =\", z)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx = 5\ny = 2.5\nz = 7.5\n```\n:::\n:::\n\n\n## Input and Output Statements\nPython provides the input() function to take user input and the print() function to display output.\n\n::: {#6e7ce8d3 .cell execution_count=3}\n``` {.python .cell-code}\n# Input and Output\nname=\"justin\"\nage=32\n#name = input(\"Enter your name: \")\n#age = int(input(\"Enter your age: \"))\n\nprint(f\"Hello, {name}! You are {age} years old.\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, justin! You are 32 years old.\n```\n:::\n:::\n\n\n## Operators\nOperators are special symbols used to perform operations on variables and values. Python supports several types of operators:\n\nArithmetic Operators: +, -, *, /, //, %, **\nComparison Operators: ==, !=, >, <, >=, <=\nLogical Operators: and, or, not\nAssignment Operators: =, +=, -=, *=, /=, //=, %=, **=\n\n::: {#18dba787 .cell execution_count=4}\n``` {.python .cell-code}\n# Arithmetic Operations\n\na = 15\nb = 4\n\naddition = a + b\nsubtraction = a - b\nmultiplication = a * b\ndivision = a / b\nfloor_division = a // b\nmodulus = a % b\nexponentiation = a ** b\n\nprint(\"Addition:\", addition)\nprint(\"Subtraction:\", subtraction)\nprint(\"Multiplication:\", multiplication)\nprint(\"Division:\", division)\nprint(\"Floor Division:\", floor_division)\nprint(\"Modulus:\", modulus)\nprint(\"Exponentiation:\", exponentiation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddition: 19\nSubtraction: 11\nMultiplication: 60\nDivision: 3.75\nFloor Division: 3\nModulus: 3\nExponentiation: 50625\n```\n:::\n:::\n\n\n## Arithmetic Expressions\nAn arithmetic expression is a combination of numbers, operators, and variables that evaluates to a value.\n\n::: {#b7839dbb .cell execution_count=5}\n``` {.python .cell-code}\n# Evaluating arithmetic expressions\n\nexpression = (5 + 2) * (10 - 3) / 2 ** 2\nprint(\"Expression Result:\", expression)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nExpression Result: 12.25\n```\n:::\n:::\n\n\n## Operator Precedence\nOperator precedence determines the order in which operations are performed in an expression. The following list shows the precedence from highest to lowest:\n\n** (Exponentiation)\n*, /, //, % (Multiplication, Division, Floor Division, Modulus)\n+, - (Addition, Subtraction)\n\n::: {#44af6cab .cell execution_count=6}\n``` {.python .cell-code}\n# Operator precedence\n\nresult = 5 + 3 * 2 ** 2 - 1\nprint(\"Operator Precedence Result:\", result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOperator Precedence Result: 16\n```\n:::\n:::\n\n\n## Evaluation of Expressions\nPython evaluates expressions from left to right, following the precedence rules.\n\n::: {#8f11c405 .cell execution_count=7}\n``` {.python .cell-code}\n# Evaluation of expressions\n\nvalue = (10 + 5) * 2 - 3 / 3\nprint(\"Evaluation Result:\", value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEvaluation Result: 29.0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}