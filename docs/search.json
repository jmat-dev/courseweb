[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "In this tutorial, we will cover the basics of Python programming, including data types, keywords, variables, input/output statements, operators, arithmetic expressions, operator precedence, and evaluation of expressions.\n\n\nPython supports several built-in data types. Let’s explore some of the most common ones:\n\nInteger (int): Represents whole numbers.\nFloating Point (float): Represents decimal numbers.\nString (str): Represents sequences of characters.\nBoolean (bool): Represents True or False.\n\n\n\n\n# Demonstrating different data types\n\n# Integer\na = 10\nprint(\"Integer:\", a, type(a))\n\n# Float\nb = 3.14\nprint(\"Float:\", b, type(b))\n\n\n# String\nc = \"Hello, Python!\"\nprint(\"String:\", c, type(c))\n\n# Boolean\nd = True\nprint(\"Boolean:\", d, type(d))\n\nInteger: 10 &lt;class 'int'&gt;\nFloat: 3.14 &lt;class 'float'&gt;\nString: Hello, Python! &lt;class 'str'&gt;\nBoolean: True &lt;class 'bool'&gt;\n\n\n\n\n\n\nVariables are used to store data in memory. A variable is created when you assign a value to it using the = operator.\n\n# Variable assignment\n\nx = 5\ny = 2.5\nz = x + y\n\nprint(\"x =\", x)\nprint(\"y =\", y)\nprint(\"z =\", z)\n\nx = 5\ny = 2.5\nz = 7.5\n\n\n\n\n\nPython provides the input() function to take user input and the print() function to display output.\n\n# Input and Output\nname=\"justin\"\nage=32\n#name = input(\"Enter your name: \")\n#age = int(input(\"Enter your age: \"))\n\nprint(f\"Hello, {name}! You are {age} years old.\")\n\nHello, justin! You are 32 years old.\n\n\n\n\n\nOperators are special symbols used to perform operations on variables and values. Python supports several types of operators:\nArithmetic Operators: +, -, *, /, //, %, ** Comparison Operators: ==, !=, &gt;, &lt;, &gt;=, &lt;= Logical Operators: and, or, not Assignment Operators: =, +=, -=, *=, /=, //=, %=, **=\n\n# Arithmetic Operations\n\na = 15\nb = 4\n\naddition = a + b\nsubtraction = a - b\nmultiplication = a * b\ndivision = a / b\nfloor_division = a // b\nmodulus = a % b\nexponentiation = a ** b\n\nprint(\"Addition:\", addition)\nprint(\"Subtraction:\", subtraction)\nprint(\"Multiplication:\", multiplication)\nprint(\"Division:\", division)\nprint(\"Floor Division:\", floor_division)\nprint(\"Modulus:\", modulus)\nprint(\"Exponentiation:\", exponentiation)\n\nAddition: 19\nSubtraction: 11\nMultiplication: 60\nDivision: 3.75\nFloor Division: 3\nModulus: 3\nExponentiation: 50625\n\n\n\n\n\nAn arithmetic expression is a combination of numbers, operators, and variables that evaluates to a value.\n\n# Evaluating arithmetic expressions\n\nexpression = (5 + 2) * (10 - 3) / 2 ** 2\nprint(\"Expression Result:\", expression)\n\nExpression Result: 12.25\n\n\n\n\n\nOperator precedence determines the order in which operations are performed in an expression. The following list shows the precedence from highest to lowest:\n** (Exponentiation) *, /, //, % (Multiplication, Division, Floor Division, Modulus) +, - (Addition, Subtraction)\n\n# Operator precedence\n\nresult = 5 + 3 * 2 ** 2 - 1\nprint(\"Operator Precedence Result:\", result)\n\nOperator Precedence Result: 16\n\n\n\n\n\nPython evaluates expressions from left to right, following the precedence rules.\n\n# Evaluation of expressions\n\nvalue = (10 + 5) * 2 - 3 / 3\nprint(\"Evaluation Result:\", value)\n\nEvaluation Result: 29.0"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#data-types",
    "href": "index.html#data-types",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "Python supports several built-in data types. Let’s explore some of the most common ones:\n\nInteger (int): Represents whole numbers.\nFloating Point (float): Represents decimal numbers.\nString (str): Represents sequences of characters.\nBoolean (bool): Represents True or False.\n\n\n\n\n# Demonstrating different data types\n\n# Integer\na = 10\nprint(\"Integer:\", a, type(a))\n\n# Float\nb = 3.14\nprint(\"Float:\", b, type(b))\n\n\n# String\nc = \"Hello, Python!\"\nprint(\"String:\", c, type(c))\n\n# Boolean\nd = True\nprint(\"Boolean:\", d, type(d))\n\nInteger: 10 &lt;class 'int'&gt;\nFloat: 3.14 &lt;class 'float'&gt;\nString: Hello, Python! &lt;class 'str'&gt;\nBoolean: True &lt;class 'bool'&gt;"
  },
  {
    "objectID": "index.html#variables",
    "href": "index.html#variables",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "Variables are used to store data in memory. A variable is created when you assign a value to it using the = operator.\n\n# Variable assignment\n\nx = 5\ny = 2.5\nz = x + y\n\nprint(\"x =\", x)\nprint(\"y =\", y)\nprint(\"z =\", z)\n\nx = 5\ny = 2.5\nz = 7.5"
  },
  {
    "objectID": "index.html#input-and-output-statements",
    "href": "index.html#input-and-output-statements",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "Python provides the input() function to take user input and the print() function to display output.\n\n# Input and Output\nname=\"justin\"\nage=32\n#name = input(\"Enter your name: \")\n#age = int(input(\"Enter your age: \"))\n\nprint(f\"Hello, {name}! You are {age} years old.\")\n\nHello, justin! You are 32 years old."
  },
  {
    "objectID": "index.html#operators",
    "href": "index.html#operators",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "Operators are special symbols used to perform operations on variables and values. Python supports several types of operators:\nArithmetic Operators: +, -, *, /, //, %, ** Comparison Operators: ==, !=, &gt;, &lt;, &gt;=, &lt;= Logical Operators: and, or, not Assignment Operators: =, +=, -=, *=, /=, //=, %=, **=\n\n# Arithmetic Operations\n\na = 15\nb = 4\n\naddition = a + b\nsubtraction = a - b\nmultiplication = a * b\ndivision = a / b\nfloor_division = a // b\nmodulus = a % b\nexponentiation = a ** b\n\nprint(\"Addition:\", addition)\nprint(\"Subtraction:\", subtraction)\nprint(\"Multiplication:\", multiplication)\nprint(\"Division:\", division)\nprint(\"Floor Division:\", floor_division)\nprint(\"Modulus:\", modulus)\nprint(\"Exponentiation:\", exponentiation)\n\nAddition: 19\nSubtraction: 11\nMultiplication: 60\nDivision: 3.75\nFloor Division: 3\nModulus: 3\nExponentiation: 50625"
  },
  {
    "objectID": "index.html#arithmetic-expressions",
    "href": "index.html#arithmetic-expressions",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "An arithmetic expression is a combination of numbers, operators, and variables that evaluates to a value.\n\n# Evaluating arithmetic expressions\n\nexpression = (5 + 2) * (10 - 3) / 2 ** 2\nprint(\"Expression Result:\", expression)\n\nExpression Result: 12.25"
  },
  {
    "objectID": "index.html#operator-precedence",
    "href": "index.html#operator-precedence",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "Operator precedence determines the order in which operations are performed in an expression. The following list shows the precedence from highest to lowest:\n** (Exponentiation) *, /, //, % (Multiplication, Division, Floor Division, Modulus) +, - (Addition, Subtraction)\n\n# Operator precedence\n\nresult = 5 + 3 * 2 ** 2 - 1\nprint(\"Operator Precedence Result:\", result)\n\nOperator Precedence Result: 16"
  },
  {
    "objectID": "index.html#evaluation-of-expressions",
    "href": "index.html#evaluation-of-expressions",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "Python evaluates expressions from left to right, following the precedence rules.\n\n# Evaluation of expressions\n\nvalue = (10 + 5) * 2 - 3 / 3\nprint(\"Evaluation Result:\", value)\n\nEvaluation Result: 29.0"
  },
  {
    "objectID": "index.html#conditional-statements-in-python",
    "href": "index.html#conditional-statements-in-python",
    "title": "Introduction to Python Programming",
    "section": "",
    "text": "Conditional statements in Python allow the execution of specific code blocks based on whether a condition is true or false. Let’s explore various types of conditional statements."
  },
  {
    "objectID": "index.html#the-if-statement",
    "href": "index.html#the-if-statement",
    "title": "Introduction to Python Programming",
    "section": "The if Statement",
    "text": "The if Statement\nThe if statement tests a specific condition. If the condition is true, the code block under the if statement is executed.\nExample\n\n# Example of an if statement\n\nnumber = 10\n\nif number &gt; 0:\n    print(f\"{number} is a positive number.\")\n\n10 is a positive number.\n\n\nExplanation The above program checks if number is greater than 0. Since 10 is greater than 0, the condition is true, and the message is printed."
  },
  {
    "objectID": "index.html#the-if-else-statement",
    "href": "index.html#the-if-else-statement",
    "title": "Introduction to Python Programming",
    "section": "The if-else Statement",
    "text": "The if-else Statement\nThe if-else statement allows you to execute one block of code if the condition is true and another block if it is false.\n\n# Example of an if-else statement\n\nnumber = -5\n\nif number &gt;= 0:\n    print(f\"{number} is a non-negative number.\")\nelse:\n    print(f\"{number} is a negative number.\")\n\n-5 is a negative number.\n\n\nExplanation In this example, the program checks if number is greater than or equal to 0. If true, it prints that the number is non-negative. Otherwise, it prints that the number is negative. Example 2\n\nage = 20\n\nif age &gt;= 18:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote.\")\n\nYou are eligible to vote.\n\n\nExplanation This program checks if a person’s age is greater than or equal to 18. If true, it prints that the person is eligible to vote. Otherwise, it states they are not eligible to vote. ## The elif Statement The elif statement, short for “else if,” allows you to check multiple conditions sequentially. If one of the conditions is true, the corresponding block of code is executed.\n\n# Example of an elif statement\n\nnumber = 0\n\nif number &gt; 0:\n    print(f\"{number} is a positive number.\")\nelif number == 0:\n    print(f\"{number} is zero.\")\nelse:\n    print(f\"{number} is a negative number.\")\n\n0 is zero.\n\n\nExplanation Here, the program checks three conditions: whether the number is positive, zero, or negative. The elif statement handles the case where number is exactly 0.\n\n# Another example of an elif statement\n\nmarks = 85\n\nif marks &gt;= 90:\n    grade = 'A'\nelif marks &gt;= 80:\n    grade = 'B'\nelif marks &gt;= 70:\n    grade = 'C'\nelse:\n    grade = 'F'\n\nprint(f\"Your grade is {grade}.\")\n\nYour grade is B.\n\n\nExplanation This program assigns a grade based on the marks obtained. Depending on the range in which the marks fall, the corresponding grade is assigned and printed."
  },
  {
    "objectID": "index.html#nested-if-else-statements",
    "href": "index.html#nested-if-else-statements",
    "title": "Introduction to Python Programming",
    "section": "Nested if-else Statements",
    "text": "Nested if-else Statements\nNested if-else statements allow you to include an if-else statement inside another if-else block for handling more complex conditions.\n\n# Example of nested if-else statements\n\nnumber = 25\n\nif number &gt; 0:\n    if number % 2 == 0:\n        print(f\"{number} is a positive even number.\")\n    else:\n        print(f\"{number} is a positive odd number.\")\n\n25 is a positive odd number.\n\n\nExplanation This example checks if a number is positive and then further checks whether it is even or odd using nested if-else statements.\n\n# Another example of nested if-else statements\n\nscore = 92\n\nif score &gt;= 50:\n    if score &gt;= 90:\n        print(\"Excellent!\")\n    else:\n        print(\"Good job!\")\nelse:\n    print(\"Better luck next time.\")\n\nExcellent!\n\n\nExplanation This program checks if a score is at least 50. If true, it further checks if the score is 90 or above, printing “Excellent!” if it is, and “Good job!” if it isn’t. If the score is below 50, it prints “Better luck next time.”"
  }
]